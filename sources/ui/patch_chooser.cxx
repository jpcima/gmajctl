// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "app_i18n.h"
#include "patch_chooser.h"
#include "model/patch.h"

void Patch_Chooser::cb_Cancel_i(Fl_Button*, void*) {
  window_->hide();
}
void Patch_Chooser::cb_Cancel(Fl_Button* o, void* v) {
  ((Patch_Chooser*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

void Patch_Chooser::cb_OK_i(Fl_Button*, void*) {
  accept_ = true;
window_->hide();
}
void Patch_Chooser::cb_OK(Fl_Button* o, void* v) {
  ((Patch_Chooser*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

Patch_Chooser::Patch_Chooser(const Patch_Bank &pbank) {
  pbank_ = &pbank;
}

int Patch_Chooser::show(const char *title, const char *text) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(280, 415);
    w = o; if (w) {/* empty */}
    o->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(205, 380, 65, 25, _("Cancel"));
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Cancel);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(125, 380, 65, 25, _("OK"));
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    { br_bank = new Fl_Hold_Browser(10, 30, 260, 340);
      br_bank->box(FL_NO_BOX);
      br_bank->color(FL_BACKGROUND2_COLOR);
      br_bank->selection_color(FL_SELECTION_COLOR);
      br_bank->labeltype(FL_NORMAL_LABEL);
      br_bank->labelfont(0);
      br_bank->labelsize(12);
      br_bank->labelcolor(FL_FOREGROUND_COLOR);
      br_bank->textsize(12);
      br_bank->align(Fl_Align(FL_ALIGN_BOTTOM));
      br_bank->when(FL_WHEN_RELEASE_ALWAYS);
    } // Fl_Hold_Browser* br_bank
    { lbl_text = new Fl_Box(10, 7, 260, 13, _("label"));
      lbl_text->labelsize(12);
      lbl_text->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* lbl_text
    o->end();
  } // Fl_Double_Window* o
  accept_ = false;
  window_ = w;
  
  w->label(title);
  lbl_text->label(text);
  
  const Patch_Bank &pbank = *pbank_;
  for (unsigned i = 0; i < Patch_Bank::max_count; ++i) {
      std::string name = std::to_string(i + 1) + " - ";
      if (pbank.used[i])
          name += pbank.slot[i].name();
      br_bank->add(name.c_str(), (void *)(uintptr_t)i);
  }
  
  w->set_modal();
  w->show();
  while (w->shown()) Fl::wait();
  int v = br_bank->value();
  void *p = br_bank->data(v);
  delete w;
  window_ = nullptr;
  if (!accept_)
      return -1;
  
  return (v == 0) ? -1 : (unsigned)(uintptr_t)p;
}
